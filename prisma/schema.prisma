// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model VoiceComplaint {
  id              String   @id @default(uuid())
  audioUrl        String?
  originalText    String   @db.Text
  translatedText  String   @db.Text
  sourceLanguage  String
  targetLanguage  String
  confidence      Float
  category        String
  priority        String
  location        String?
  status          String   @default("pending")
  timestamp       DateTime @default(now())
  
  // Metadata
  deviceInfo      String?
  browserInfo     String?
  audioQuality    Float?
  noiseLevel      Float?
  duration        Int?     // in seconds

  // Relations
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])
  assignedToId    String?
  assignedTo      User?    @relation("AssignedComplaints", fields: [assignedToId], references: [id])
  
  // Tracking
  views           Int      @default(0)
  updates         Update[]
  tags            Tag[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([category])
  @@index([priority])
  @@index([status])
  @@index([timestamp])
}

model Update {
  id              String   @id @default(uuid())
  complaintId     String
  complaint       VoiceComplaint @relation(fields: [complaintId], references: [id])
  status          String
  note            String   @db.Text
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  timestamp       DateTime @default(now())

  @@index([complaintId])
  @@index([timestamp])
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  complaints  VoiceComplaint[]
  createdAt   DateTime @default(now())
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  name              String?
  role              String   @default("user")
  complaints        VoiceComplaint[]
  assignedComplaints VoiceComplaint[] @relation("AssignedComplaints")
  updates           Update[]
  systemSettings    SystemSettings[]
  accounts          Account[]
  sessions          Session[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([email])
  @@index([role])
}

model SystemSettings {
  id                String   @id
  maxFileSize       Int      @default(10)
  allowedFileTypes  String[] @default(["audio/wav", "audio/mp3", "audio/ogg"])
  autoTranslation   Boolean  @default(true)
  defaultLanguage   String   @default("en")
  
  priorityThresholds Json    @default("{\"urgent\":80,\"high\":60,\"medium\":40}")
  notificationSettings Json  @default("{\"email\":true,\"push\":true,\"sms\":false}")
  retention         Json     @default("{\"audioFiles\":30,\"transcripts\":365}")
  aiSettings        Json     @default("{\"enhancedTranscription\":true,\"contentAnalysis\":true,\"sentimentAnalysis\":true}")
  
  updatedAt         DateTime @updatedAt
  updatedBy         String?
  updatedByUser     User?    @relation(fields: [updatedBy], references: [id])
}

// Add NextAuth.js models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 